*{
    margin: 0;
    padding: 0;
    font-size: 24px;
    font-family: "微软雅黑";
    border: 0;
}

body{
    background: url("img/body.png") 10px 10px fixed;
    /*长度值解释的是元素内边距区左上角的偏移。偏移点是图像的左上角。*/
}

.div_class{
    width: 700px;
    margin: 10px auto;
    /*text-align: justify;*/
    text-indent: 1em;
    /*height: 300px;*/
}

.warp{
    width: 1200px;
    margin: 0 auto;
    /*background-color 不能继承，其默认值是 transparent。*/
    /*transparent 有“透明”之意。也就是说，如果一个元素没有指定背景色，那么背景就是透明的，这样其祖先元素的背景才能可见。*/
    /*background-color*/

    background: url("img/wrap.gif") center repeat-y;
    /*换句话说，百分数值同时应用于元素和图像。也就是说，图像中描述为 50% 50% 的点（中心点）与元素中描述为 50% 50% 的点（中心点）对齐。*/
    /*如果图像位于 0% 0%，其左上角将放在元素内边距区的左上角。如果图像位置是 100% 100%，会使图像的右下角放在右边距的右下角。*/

}

/*以下作为测试选择器的示例代码*/

/*id选择器*/
/*id选择器的子代选择器，只会对子元素造成影响，不会对其他的后代造成影响*/
/*此处选择了id为 idSelect_div 下p的子元素 strong，所以不会对同样的在p下，且在span下的strong造成影响*/
#idSelect_div p > strong {
    color: grey;
}

/*id的后代选择器（descendant selector）又称为包含选择器。*/
#idSelect_div h2 {
    color: firebrick;
}

/*id的后代选择器在后代选择器中，规则左边的选择器一端包括两个或多个用空格分隔的选择器。选择器之间的空格是一种结合符（combinator）。*/
/*每个空格结合符可以解释为“... 在 ... 找到”、“... 作为 ... 的一部分”、“... 作为 ... 的后代”，但是要求必须从右向左读选择器。*/
/*要知道，后代选择器会对你的选择器所选择的所有元素造出影响，无论嵌套到多深*/
/*这里，选择的是id：idSelect_div 下的 h2 下的 strong，因此，只要是 idSelect_div 下的 h2 下的strong元素，就算再被span所嵌套*/
/*依然会被选择*/
#idSelect_div h2 strong {
    color: aqua;
}


/*class（类选择器）*/
/*class（类选择器）的后代选择器*/
.div_class strong {
    color: red;
}

/*class（类选择器）的后代选择器*/
.div_class h2 {
    color: red;
    text-decoration: blink;
}

.div_class h2 strong {
    color: blue;
}

/*属性选择器*/
/*选择所有包含自定义属性Selecttitle属性的元素*/
[Selecttitle] {
    color: green;
}
/*为 Selecttitle="p" 的所有元素设置样式*/
[Selecttitle = p]{
    color: gainsboro;
}
/*为包含指定值的  h2 属性的所有元素设置样式*/
[Selecttitle ~= h2]{
    color: #266392;
}


/*设置表单的样式
属性选择器在为不带有 class 或 id 的表单设置样式时特别有用：

input[type="text"]
{
    width:150px;
    display:block;
    margin-bottom:10px;
    background-color:yellow;
    font-family: Verdana, Arial;
}

input[type="button"]
{
    width:120px;
    margin-left:35px;
    display:block;
    font-family: Verdana, Arial;
}*/

/*属性值参考
选择器	描述
[attribute]	用于选取带有指定属性的元素。
[attribute=value]	用于选取带有指定属性和值的元素。
[attribute~=value]	用于选取属性值中包含指定词汇的元素。
[attribute|=value]	用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
[attribute^=value]	匹配属性值以指定值开头的每个元素。
[attribute$=value]	匹配属性值以指定值结尾的每个元素。
[attribute*=value]	匹配属性值中包含指定值的每个元素。
*/

/*
当为链接的不同状态设置样式时，请按照以下次序规则：
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后
*/
#idSelect_div a{
    text-decoration: none;
}
/*a:link - 普通的、未被访问的链接*/
#idSelect_div a:link{
    color: #5a5a5a;
}
/*a:visited - 用户已访问的链接*/
#idSelect_div a:visited{
    color: #3399cc;
}
/*a:hover - 鼠标指针位于链接的上方*/
#idSelect_div a:hover{
    color: #630063;
}
/*a:active - 链接被点击的时刻*/
#idSelect_div a:active{
    color: #cc0000;
}

.div_relative{
    border: solid 1px #cc0000;
    width: 500px;
    position: relative;
    left: 350px;
}

.div_fixed{
    border: solid 1px #630063;
    width: 200px;
    height: 100px;
    position: fixed;
    right: 10px;
    bottom: 10px;
}

.div_fixed p{
    font-size: 16px;
}

.div_check{
    border: solid 1px #3399cc;
    width: 300px;
    height: 200px;
}

.div_absolute{
    border: solid 1px #000000;
    width: 250px;
    height: 150px;
    position: absolute;
    background-color: #7f7f7f;
    left: 200px;
    top: 200px;
}

.div_absolute p{
    font-size: 20px;
}

.div_inherit{
    border: solid 1px #aaaaaa;
    width: 250px;
    height: 150px;
    position: inherit;
}



.div_fix{
    font-size: 18px !important;
}

.label{
    position: absolute;
    background-color: #6AC5AC;
    color: #414142;
    line-height: 1em;
    top: 0;
    left: 0;
    padding: 0 3px 3px 0;
}


.elem{
    border: solid #6AC5AC 3px;
    position: relative;
}

.elem span{
    font-size: 16px;
}

.elem-red {
    border: solid #D64078 3px;
}

.nav{
    float: left;
    top: 19px;
    width: 200px;
}

.nav .label{
    color: white;
    background-color: #D64078;
    position: static;
}

.Fix_ul li{
    list-style-position: inside;
    font-size: 12px;
}

.Fix_ul a{
    text-decoration: none;
    font-size: 18px;
}

.Fix_ul a:link, .Fix_ul a:visited{
    color: deeppink;
}

.Fix_ul a:hover, .Fix_ul a:active{
    color: tomato;
}

.Section{
    margin-left: 206px;
}

.elem-green{
    border: solid #FDC72F 3px;
}

.Section .label{
    background-color: #FDC72F;
}

.Section p{
    font-size: 18px;
    margin-top: 20px;
}




.button_class{
    padding: 10px;
    margin: 20px auto 0;
    text-align: center;
}

.button_show{
    padding: 10px;
    margin: 20px auto 0;
    text-align: center;
    color: darkslategray;
    background-color: skyblue;
}


/*
after 伪元素（注意这不是伪类，而是伪元素，代表一个元素之后最近的元素）和 IEhack ，
可以完美兼容当前主流的各大浏览器，这里的 IEhack 指的是触发 hasLayout。
给浮动元素的容器添加一个clearfix的class，
然后给这个class添加一个:after伪元素实现元素末尾添加一个看不见的块元素（Block element）清理浮动。
*/
.clearFix:after{
    content: "020";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
}

.clearFix {
    /* 触发 hasLayout */
    zoom: 1;
}

/*
清除浮动的方法可以分成两类：

一是利用 clear 属性，包括在浮动元素末尾添加一个带有 clear: both 属性的空 div 来闭合元素，
其实利用 :after 伪元素的方法也是在元素末尾添加一个内容为一个点并带有 clear: both 属性的元素实现的。

二是触发浮动元素父元素的 BFC (Block Formatting Contexts, 块级格式化上下文)，使到该父元素可以包含浮动元素，关于这一点。

在网页主要布局时使用:after伪元素方法并作为主要清理浮动方式；在小模块如ul里使用overflow:hidden;（留意可能产生的隐藏溢出元素问题）；
如果本身就是浮动元素则可自动清除内部浮动，无需格外处理；正文中使用邻接元素清理之前的浮动。

最后可以使用相对完美的:after伪元素方法清理浮动，文档结构更加清晰。

*/